
# ----------------------
# User Config
# ----------------------
export HISTSIZE=50000
export HISTFILESIZE=1000000
export HISTIGNORE='*sudo -S*'

export PATH=$PATH:$HOME/bin
export PATH=$PATH:$HOME/.local/bin
export PATH="$HOME/var/www/html/aws_cli:$PATH"

# Go Path
export GOPATH=/usr/local/go
export PATH=$PATH:$GOPATH/bin

source "$HOME/.cargo/env"

# Java Home
# export JAVA_HOME="/usr/lib/jvm/jdk1.8.0_221"
# export PATH=$JAVA_HOME/bin:$PATH

# Android home default path
# export ANDROID_HOME=$HOME/Android/Sdk
# export PATH=$PATH:$ANDROID_HOME/emulator
# export PATH=$PATH:$ANDROID_HOME/tools/emulator
# export PATH=$PATH:$ANDROID_HOME/tools
# export PATH=$PATH:$ANDROID_HOME/tools/bin
# export PATH=$PATH:$ANDROID_HOME/platform-tools

# Update code
function update(){
  sudo apt update
}

# Upgrade code
function upgrade(){
  sudo apt upgrade -y;
	# sudo snap refresh;
}

# Autoremvoe code
function autoremove(){
  sudo apt autoremove -y &&
  sudo apt autoclean &&
  sudo apt clean
}

# cd and ls in single command
function cd(){
  builtin cd "$@" &&  lsd -A
  pythonEnvCheck
}

function pythonEnvCheck(){
	if [[ -z "$VIRTUAL_ENV" ]] ; then
    ## If env folder is found then activate the vitualenv
      if [[ -d .venv ]] ; then
				source .venv/bin/activate
      fi
  else
    ## check the current folder belong to earlier VIRTUAL_ENV folder
    # if yes then do nothing
    # else deactivate
      parentdir="$(dirname "$VIRTUAL_ENV")"
      if [[ "$PWD"/ != "$parentdir"/* ]] ; then
				deactivate
      fi
  fi
}

function pythoninit(){
	python3 -m venv .venv && source .venv/bin/activate
}

function mkcd(){
	mkdir -p $1 && cd $1
}

function video_format(){
	ffmpeg -i "$@" -map 0 -c copy "$@".mkv && rm -rf "$@"
}

if [ -f ~/.tmux.conf ]; then

get_sessions_by_mru() {
	tmux list-sessions -F '#{session_last_attached} #{session_name}' | sort --numeric-sort --reverse | awk '{print $2}'
}

function tx(){

  TMUX_STATUS=$?
  if [[ $1 != '' ]] ; then
    RESULT=$1;
    (echo $1 | awk -F / -v OFS=_ '{ print $(NF-1), $NF }') | read SESSION_NAME
  else
    RESULT=$(pwd);
    (pwd | awk -F / -v OFS=_ '{ print $(NF-1), $NF }') | read SESSION_NAME
  fi

if [ $TMUX_STATUS -eq 0 ]; then                                 # tmux is running
	SESSION=$(tmux list-sessions -F '#S' | grep "^$SESSION_NAME$") # find existing session
else
	SESSION=""
fi

if [ "$TMUX" = "" ]; then                          # not currently in tmux
	if [ "$SESSION" = "" ]; then                      # session does not exist
		tmux new-session -s "$SESSION_NAME" -c "$RESULT" # create session and attach
	else                                              # session exists
		tmux attach-session -t "$SESSION"                        # attach to session
	fi
else                                                  # currently in tmux
	if [ "$SESSION" = "" ]; then                         # session does not exist
		tmux new-session -d -s "$SESSION_NAME" -c "$RESULT" # create session
		tmux switch-client -t "$SESSION_NAME"               # attach to session
	else                                                 # session exists
		tmux switch-client -t "$SESSION"                    # switch to session
	fi
fi

}

function txs(){

  TMUX_STATUS=$?
  SESSION_NAME=$1

if [ "$TMUX" = "" ]; then                          # not currently in tmux
  tmux attach-session -t "$SESSION_NAME"                        # attach to session
else                                                  # currently in tmux
  tmux switch-client -t "$SESSION_NAME"                    # switch to session
fi

}

fi

if [ $SHELL = '/bin/bash' ]; then
		# First need to install fzf in the root folder
		# git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
		# ~/.fzf/install
    [ -f ~/.fzf.bash ] && source ~/.fzf.bash
		export FZF_DEFAULT_OPS="--extended"
		export FZF_DEFAULT_COMMAND='fdfind --type f --hidden --follow --exclude .git'
		export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"

		bind '"\e[A": history-search-backward'
		bind '"\e[B": history-search-forward'

		# Direnv setup
		# create a file `.envrc` to any folder to activate the direnv
		# give permission `direnv allow .`
		eval "$(direnv hook bash)"

		cdnvm() {
		    cd "$@";
		    nvm_path=$(nvm_find_up .nvmrc | tr -d '\n')

		    # If there are no .nvmrc file, use the default nvm version
		    if [[ ! $nvm_path = *[^[:space:]]* ]]; then

		        declare default_version;
		        default_version=$(nvm version default);

		        # If there is no default version, set it to `node`
		        # This will use the latest version on your machine
		        if [[ $default_version == "N/A" ]]; then
		            nvm alias default node;
		            default_version=$(nvm version default);
		        fi

		        # If the current version is not the default version, set it to use the default version
		        if [[ $(nvm current) != "$default_version" ]]; then
		            nvm use default;
		        fi

		        elif [[ -s $nvm_path/.nvmrc && -r $nvm_path/.nvmrc ]]; then
		        declare nvm_version
		        nvm_version=$(<"$nvm_path"/.nvmrc)

		        declare locally_resolved_nvm_version
		        # `nvm ls` will check all locally-available versions
		        # If there are multiple matching versions, take the latest one
		        # Remove the `->` and `*` characters and spaces
		        # `locally_resolved_nvm_version` will be `N/A` if no local versions are found
		        locally_resolved_nvm_version=$(nvm ls --no-colors "$nvm_version" | tail -1 | tr -d '\->*' | tr -d '[:space:]')

		        # If it is not already installed, install it
		        # `nvm install` will implicitly use the newly-installed version
		        if [[ "$locally_resolved_nvm_version" == "N/A" ]]; then
		            nvm install "$nvm_version";
		        elif [[ $(nvm current) != "$locally_resolved_nvm_version" ]]; then
		            nvm use "$nvm_version";
		        fi
		    fi
		}
		alias cd='cdnvm'
		cd $PWD

fi

if [ $SHELL = '/usr/bin/zsh' ]; then
		export FZF_DEFAULT_OPS="--extended"
		export FZF_DEFAULT_COMMAND='fdfind --type f --hidden --follow --exclude .git --exclude node_modules'
		export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
		export FZF_ALT_C_COMMAND='fd --type d --hidden --follow --exclude .git'

		# Use fd (https://github.com/sharkdp/fd) for listing path candidates.
    # - The first argument to the function ($1) is the base path to start traversal
    # - See the source code (completion.{bash,zsh}) for the details.
    _fzf_compgen_path() {
      fd --hidden --follow --exclude ".git" . "$1"
    }

    # Use fd to generate the list for directory completion
    _fzf_compgen_dir() {
      fd --type d --hidden --follow --exclude ".git" . "$1"
    }

		# Direnv setup
		# create a file `.envrc` to any folder to activate the direnv
		# give permission `direnv allow .`
		eval "$(direnv hook zsh)"

		# place this after nvm initialization!
		autoload -U add-zsh-hook
		load-nvmrc() {
		  local node_version="$(nvm version)"
		  local nvmrc_path="$(nvm_find_nvmrc)"

		  if [ -n "$nvmrc_path" ]; then
		    local nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")

		    if [ "$nvmrc_node_version" = "N/A" ]; then
		      nvm install
		    elif [ "$nvmrc_node_version" != "$node_version" ]; then
		      nvm use
		    fi
		  elif [ "$node_version" != "$(nvm version default)" ]; then
		    echo "Reverting to nvm default version"
		    nvm use default
		  fi
		}
		add-zsh-hook chpwd load-nvmrc
		load-nvmrc

		zle_highlight+=(paste:none)

		### Fix slowness of pastes with zsh-syntax-highlighting.zsh

		pasteinit() {
		  OLD_SELF_INSERT=${${(s.:.)widgets[self-insert]}[2,3]}
		  zle -N self-insert url-quote-magic # I wonder if you'd need `.url-quote-magic`?
		}

		pastefinish() {
		  zle -N self-insert $OLD_SELF_INSERT
		}
		zstyle :bracketed-paste-magic paste-init pasteinit
		zstyle :bracketed-paste-magic paste-finish pastefinish

		### Fix slowness of pastes

		### Fix slowness of git

		__git_files () {
    	_wanted files expl 'local files' _files
    }

		### Fix slowness of git

		# Only for windows wsl to duplicate tab
		precmd(){
			printf "\e]9;9;%s\e\\" "$PWD"
		}

fi
